// Do not edit this file. It's generated from corerror.xml automatically
#include "errormessage.h"

namespace netcoredbg
{

#define CASE_OF(CODE, STRERROR) case CODE: str=STRERROR; break;

const char *errormessage(HRESULT hresult)
{
    const char *str;

    switch (hresult)
    {
// From (winerror.h/palrt.h)
        CASE_OF(S_OK, "S_OK");
        CASE_OF(S_FALSE, "S_FALSE");
        CASE_OF(E_NOTIMPL, "E_NOTIMPL");
        CASE_OF(E_UNEXPECTED, "E_UNEXPECTED");
        CASE_OF(E_HANDLE, "E_HANDLE");
        CASE_OF(E_ABORT, "E_ABORT");
        CASE_OF(E_FAIL, "E_FAIL");
        CASE_OF(E_PENDING, "E_PENDING");
        CASE_OF(DISP_E_PARAMNOTFOUND, "DISP_E_PARAMNOTFOUND");
        CASE_OF(DISP_E_TYPEMISMATCH, "DISP_E_TYPEMISMATCH");
        CASE_OF(DISP_E_BADVARTYPE, "DISP_E_BADVARTYPE");
        CASE_OF(DISP_E_OVERFLOW, "DISP_E_OVERFLOW");
        CASE_OF(CLASS_E_CLASSNOTAVAILABLE, "CLASS_E_CLASSNOTAVAILABLE");
        CASE_OF(CLASS_E_NOAGGREGATION, "CLASS_E_NOAGGREGATION");
        CASE_OF(CO_E_CLASSSTRING, "CO_E_CLASSSTRING");
        CASE_OF(MK_E_SYNTAX, "MK_E_SYNTAX");
        CASE_OF(STG_E_INVALIDFUNCTION, "STG_E_INVALIDFUNCTION");
        CASE_OF(STG_E_FILENOTFOUND, "STG_E_FILENOTFOUND");
        CASE_OF(STG_E_PATHNOTFOUND, "STG_E_PATHNOTFOUND");
        CASE_OF(STG_E_WRITEFAULT, "STG_E_WRITEFAULT");
        CASE_OF(STG_E_FILEALREADYEXISTS, "STG_E_FILEALREADYEXISTS");
        CASE_OF(STG_E_ABNORMALAPIEXIT, "STG_E_ABNORMALAPIEXIT");
        CASE_OF(NTE_BAD_UID, "NTE_BAD_UID");
        CASE_OF(NTE_BAD_HASH, "NTE_BAD_HASH");
        CASE_OF(NTE_BAD_KEY, "NTE_BAD_KEY");
        CASE_OF(NTE_BAD_LEN, "NTE_BAD_LEN");
        CASE_OF(NTE_BAD_DATA, "NTE_BAD_DATA");
        CASE_OF(NTE_BAD_SIGNATURE, "NTE_BAD_SIGNATURE");
        CASE_OF(NTE_BAD_VER, "NTE_BAD_VER");
        CASE_OF(NTE_BAD_ALGID, "NTE_BAD_ALGID");
        CASE_OF(NTE_BAD_FLAGS, "NTE_BAD_FLAGS");
        CASE_OF(NTE_BAD_TYPE, "NTE_BAD_TYPE");
        CASE_OF(NTE_BAD_KEY_STATE, "NTE_BAD_KEY_STATE");
        CASE_OF(NTE_BAD_HASH_STATE, "NTE_BAD_HASH_STATE");
        CASE_OF(NTE_NO_KEY, "NTE_NO_KEY");
        CASE_OF(NTE_NO_MEMORY, "NTE_NO_MEMORY");
        CASE_OF(NTE_SIGNATURE_FILE_BAD, "NTE_SIGNATURE_FILE_BAD");
        CASE_OF(NTE_FAIL, "NTE_FAIL");
        CASE_OF(CRYPT_E_HASH_VALUE, "CRYPT_E_HASH_VALUE");
        CASE_OF(TYPE_E_SIZETOOBIG, "TYPE_E_SIZETOOBIG");
        CASE_OF(TYPE_E_DUPLICATEID, "TYPE_E_DUPLICATEID");
        CASE_OF(INET_E_CANNOT_CONNECT, "INET_E_CANNOT_CONNECT");
        CASE_OF(INET_E_RESOURCE_NOT_FOUND, "INET_E_RESOURCE_NOT_FOUND");
        CASE_OF(INET_E_OBJECT_NOT_FOUND, "INET_E_OBJECT_NOT_FOUND");
        CASE_OF(INET_E_DATA_NOT_AVAILABLE, "INET_E_DATA_NOT_AVAILABLE");
        CASE_OF(INET_E_DOWNLOAD_FAILURE, "INET_E_DOWNLOAD_FAILURE");
        CASE_OF(INET_E_CONNECTION_TIMEOUT, "INET_E_CONNECTION_TIMEOUT");
        CASE_OF(INET_E_UNKNOWN_PROTOCOL, "INET_E_UNKNOWN_PROTOCOL");
        CASE_OF(CTL_E_OVERFLOW, "CTL_E_OVERFLOW");
        CASE_OF(CTL_E_OUTOFMEMORY, "CTL_E_OUTOFMEMORY");
        CASE_OF(CTL_E_DIVISIONBYZERO, "CTL_E_DIVISIONBYZERO");
        CASE_OF(CTL_E_OUTOFSTACKSPACE, "CTL_E_OUTOFSTACKSPACE");
        CASE_OF(CTL_E_FILENOTFOUND, "CTL_E_FILENOTFOUND");
        CASE_OF(CTL_E_DEVICEIOERROR, "CTL_E_DEVICEIOERROR");
        CASE_OF(CTL_E_PERMISSIONDENIED, "CTL_E_PERMISSIONDENIED");
        CASE_OF(CTL_E_PATHFILEACCESSERROR, "CTL_E_PATHFILEACCESSERROR");
        CASE_OF(CTL_E_PATHNOTFOUND, "CTL_E_PATHNOTFOUND");
        CASE_OF(DBG_PRINTEXCEPTION_C, "DBG_PRINTEXCEPTION_C");
//from corerror.h
        default:
            str = "Unknown HRESULT code";
            break;
    }
    return str;
}

} // namespace netcoredbg
